import React, { useState, useEffect } from "react";
import { base44 } from "@/api/base44Client";
import { useQuery } from "@tanstack/react-query";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import {
  format,
  startOfMonth,
  endOfMonth,
  startOfWeek,
  endOfWeek,
  eachDayOfInterval,
  isSameMonth,
  isSameDay,
  addMonths,
  subMonths,
  isToday,
  parseISO
} from "date-fns";
import { ChevronLeft, ChevronRight, Diamond, Package, CheckSquare } from "lucide-react";

export default function Calendar() {
  const [selectedProject, setSelectedProject] = useState(null);
  const [currentMonth, setCurrentMonth] = useState(new Date());
  const [selectedDate, setSelectedDate] = useState(null);

  const { data: projects = [] } = useQuery({
    queryKey: ['projects'],
    queryFn: () => base44.entities.Project.list("-created_date"),
  });

  const { data: nodes = [] } = useQuery({
    queryKey: ['nodes', selectedProject],
    queryFn: () => base44.entities.Node.filter({ project_id: selectedProject }),
    enabled: !!selectedProject,
  });

  useEffect(() => {
    if (projects.length > 0 && !selectedProject) {
      setSelectedProject(projects[0].id);
    }
  }, [projects]);

  const monthStart = startOfMonth(currentMonth);
  const monthEnd = endOfMonth(currentMonth);
  const calendarStart = startOfWeek(monthStart);
  const calendarEnd = endOfWeek(monthEnd);
  const calendarDays = eachDayOfInterval({ start: calendarStart, end: calendarEnd });

  const getNodesForDate = (date) => {
    return nodes.filter(node => {
      if (!node.start_date && !node.due_date) return false;
      
      const startDate = node.start_date ? parseISO(node.start_date) : null;
      const dueDate = node.due_date ? parseISO(node.due_date) : null;
      
      if (startDate && isSameDay(startDate, date)) return true;
      if (dueDate && isSameDay(dueDate, date)) return true;
      
      if (startDate && dueDate && date >= startDate && date <= dueDate) return true;
      
      return false;
    });
  };

  const getNodeIcon = (type) => {
    switch (type) {
      case "milestone": return <Diamond className="w-3 h-3" />;
      case "deliverable": return <Package className="w-3 h-3" />;
      case "task": return <CheckSquare className="w-3 h-3" />;
      default: return null;
    }
  };

  const getNodeColor = (type) => {
    switch (type) {
      case "milestone": return "bg-amber-100 text-amber-700 border-amber-300";
      case "deliverable": return "bg-emerald-100 text-emerald-700 border-emerald-300";
      case "task": return "bg-sky-100 text-sky-700 border-sky-300";
      default: return "bg-slate-100 text-slate-700 border-slate-300";
    }
  };

  const statusColors = {
    not_started: "bg-slate-200 text-slate-700",
    in_progress: "bg-blue-100 text-blue-700",
    blocked: "bg-red-100 text-red-700",
    done: "bg-green-100 text-green-700"
  };

  if (!selectedProject) {
    return (
      <div className="flex items-center justify-center h-full">
        <div className="text-center">
          <h2 className="text-xl font-bold text-slate-900 mb-2">No Project Selected</h2>
          <p className="text-slate-600">Create a project to view calendar</p>
        </div>
      </div>
    );
  }

  const selectedDateNodes = selectedDate ? getNodesForDate(selectedDate) : [];

  return (
    <div className="h-full flex flex-col">
      <div className="bg-white border-b border-slate-200 px-6 py-4">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-2xl font-bold text-slate-900">Calendar View</h2>
          <Select value={selectedProject} onValueChange={setSelectedProject}>
            <SelectTrigger className="w-64">
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              {projects.map(p => (
                <SelectItem key={p.id} value={p.id}>{p.name}</SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>

        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <Button
              variant="outline"
              size="icon"
              onClick={() => setCurrentMonth(subMonths(currentMonth, 1))}
            >
              <ChevronLeft className="w-4 h-4" />
            </Button>
            <h3 className="text-xl font-bold text-slate-900 min-w-48 text-center">
              {format(currentMonth, "MMMM yyyy")}
            </h3>
            <Button
              variant="outline"
              size="icon"
              onClick={() => setCurrentMonth(addMonths(currentMonth, 1))}
            >
              <ChevronRight className="w-4 h-4" />
            </Button>
          </div>

          <Button
            variant="outline"
            onClick={() => setCurrentMonth(new Date())}
          >
            Today
          </Button>
        </div>
      </div>

      <div className="flex-1 overflow-auto p-6">
        <div className="grid lg:grid-cols-4 gap-6">
          <div className="lg:col-span-3">
            <Card className="overflow-hidden">
              <div className="grid grid-cols-7 bg-slate-50 border-b border-slate-200">
                {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (
                  <div key={day} className="p-3 text-center font-semibold text-slate-700 text-sm">
                    {day}
                  </div>
                ))}
              </div>

              <div className="grid grid-cols-7">
                {calendarDays.map((day, index) => {
                  const dayNodes = getNodesForDate(day);
                  const isCurrentMonth = isSameMonth(day, currentMonth);
                  const isCurrentDay = isToday(day);
                  const isSelected = selectedDate && isSameDay(day, selectedDate);

                  return (
                    <div
                      key={index}
                      className={`min-h-32 border-r border-b border-slate-200 p-2 cursor-pointer transition-colors ${
                        !isCurrentMonth ? 'bg-slate-50' : 'bg-white hover:bg-slate-50'
                      } ${isSelected ? 'bg-blue-50 ring-2 ring-blue-500 ring-inset' : ''}`}
                      onClick={() => setSelectedDate(day)}
                    >
                      <div className={`text-sm font-medium mb-2 ${
                        !isCurrentMonth ? 'text-slate-400' : isCurrentDay ? 'text-blue-600 font-bold' : 'text-slate-700'
                      }`}>
                        {isCurrentDay && (
                          <span className="inline-flex items-center justify-center w-6 h-6 rounded-full bg-blue-600 text-white text-xs">
                            {format(day, 'd')}
                          </span>
                        )}
                        {!isCurrentDay && format(day, 'd')}
                      </div>

                      <div className="space-y-1">
                        {dayNodes.slice(0, 3).map(node => (
                          <div
                            key={node.id}
                            className={`text-xs px-2 py-1 rounded border ${getNodeColor(node.type)} truncate flex items-center gap-1`}
                          >
                            {getNodeIcon(node.type)}
                            <span className="truncate">{node.title}</span>
                          </div>
                        ))}
                        {dayNodes.length > 3 && (
                          <div className="text-xs text-slate-500 px-2">
                            +{dayNodes.length - 3} more
                          </div>
                        )}
                      </div>
                    </div>
                  );
                })}
              </div>
            </Card>
          </div>

          <div className="lg:col-span-1">
            <Card className="p-4 sticky top-0">
              <h3 className="font-bold text-slate-900 mb-4">
                {selectedDate ? format(selectedDate, "MMMM d, yyyy") : "Select a date"}
              </h3>

              {selectedDateNodes.length === 0 ? (
                <p className="text-slate-500 text-sm">No items scheduled</p>
              ) : (
                <div className="space-y-3">
                  {selectedDateNodes.map(node => (
                    <div key={node.id} className="border border-slate-200 rounded-lg p-3">
                      <div className="flex items-start gap-2 mb-2">
                        {getNodeIcon(node.type)}
                        <div className="flex-1 min-w-0">
                          <h4 className="font-medium text-sm text-slate-900 truncate">
                            {node.title}
                          </h4>
                          <Badge className={`text-xs mt-1 ${getNodeColor(node.type)}`}>
                            {node.type}
                          </Badge>
                        </div>
                      </div>

                      {node.status && (
                        <Badge className={`text-xs ${statusColors[node.status]} mb-2`}>
                          {node.status.replace("_", " ")}
                        </Badge>
                      )}

                      {node.start_date && node.due_date && (
                        <p className="text-xs text-slate-600 mt-2">
                          {format(parseISO(node.start_date), "MMM d")} â†’ {format(parseISO(node.due_date), "MMM d")}
                        </p>
                      )}

                      {node.discipline && (
                        <p className="text-xs text-slate-500 mt-1 capitalize">
                          {node.discipline}
                        </p>
                      )}

                      {node.tags && node.tags.length > 0 && (
                        <div className="flex flex-wrap gap-1 mt-2">
                          {node.tags.map((tag, i) => (
                            <Badge key={i} variant="outline" className="text-[10px]">
                              {tag}
                            </Badge>
                          ))}
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              )}
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
}