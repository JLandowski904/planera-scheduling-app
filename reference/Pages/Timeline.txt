import React, { useState, useEffect } from "react";
import { base44 } from "@/api/base44Client";
import { useQuery } from "@tanstack/react-query";
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { format, differenceInDays, startOfMonth, endOfMonth, eachDayOfInterval } from "date-fns";
import { Diamond, Package, CheckSquare, Layers } from "lucide-react";

export default function Timeline() {
  const [selectedProject, setSelectedProject] = useState(null);
  const [selectedPhase, setSelectedPhase] = useState("all");

  const { data: projects = [] } = useQuery({
    queryKey: ['projects'],
    queryFn: () => base44.entities.Project.list("-created_date"),
  });

  const { data: nodes = [] } = useQuery({
    queryKey: ['nodes', selectedProject],
    queryFn: () => base44.entities.Node.filter({ project_id: selectedProject }),
    enabled: !!selectedProject,
  });

  useEffect(() => {
    if (projects.length > 0 && !selectedProject) {
      setSelectedProject(projects[0].id);
    }
  }, [projects]);

  const phases = nodes.filter(n => n.type === "phase");
  
  const timelineNodes = nodes
    .filter(n => n.type !== "person" && n.type !== "phase" && n.start_date && n.due_date)
    .filter(n => selectedPhase === "all" || n.phase_id === selectedPhase)
    .sort((a, b) => new Date(a.start_date) - new Date(b.start_date));

  const getTimelineRange = () => {
    if (timelineNodes.length === 0) return { start: new Date(), end: new Date() };
    
    const dates = timelineNodes.flatMap(n => [new Date(n.start_date), new Date(n.due_date)]);
    const minDate = new Date(Math.min(...dates));
    const maxDate = new Date(Math.max(...dates));
    
    return {
      start: startOfMonth(minDate),
      end: endOfMonth(maxDate)
    };
  };

  const range = getTimelineRange();
  const totalDays = differenceInDays(range.end, range.start) + 1;
  const dayWidth = 40;

  const getNodeIcon = (type) => {
    switch (type) {
      case "milestone": return <Diamond className="w-3 h-3" />;
      case "deliverable": return <Package className="w-3 h-3" />;
      case "task": return <CheckSquare className="w-3 h-3" />;
      default: return null;
    }
  };

  const getNodeColor = (type) => {
    switch (type) {
      case "milestone": return "bg-amber-500";
      case "deliverable": return "bg-emerald-500";
      case "task": return "bg-sky-500";
      default: return "bg-slate-500";
    }
  };

  const statusColors = {
    not_started: "bg-slate-100 text-slate-700",
    in_progress: "bg-blue-100 text-blue-700",
    blocked: "bg-red-100 text-red-700",
    done: "bg-green-100 text-green-700"
  };

  if (!selectedProject) {
    return (
      <div className="flex items-center justify-center h-full">
        <div className="text-center">
          <h2 className="text-xl font-bold text-slate-900 mb-2">No Project Selected</h2>
          <p className="text-slate-600">Create a project to view timeline</p>
        </div>
      </div>
    );
  }

  return (
    <div className="h-full flex flex-col">
      <div className="bg-white border-b border-slate-200 px-6 py-4">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-2xl font-bold text-slate-900">Timeline View</h2>
          <div className="flex items-center gap-3">
            <Select value={selectedProject} onValueChange={setSelectedProject}>
              <SelectTrigger className="w-64">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                {projects.map(p => (
                  <SelectItem key={p.id} value={p.id}>{p.name}</SelectItem>
                ))}
              </SelectContent>
            </Select>

            {phases.length > 0 && (
              <Select value={selectedPhase} onValueChange={setSelectedPhase}>
                <SelectTrigger className="w-48">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">
                    <div className="flex items-center gap-2">
                      <Layers className="w-4 h-4" />
                      <span>All Phases</span>
                    </div>
                  </SelectItem>
                  {phases.map(phase => (
                    <SelectItem key={phase.id} value={phase.id}>
                      {phase.title}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            )}
          </div>
        </div>
      </div>

      <div className="flex-1 overflow-auto p-6">
        {timelineNodes.length === 0 ? (
          <Card className="p-12 text-center">
            <h3 className="text-lg font-semibold text-slate-900 mb-2">No items to display</h3>
            <p className="text-slate-600">
              {selectedPhase === "all" 
                ? "Add tasks, deliverables, or milestones with dates"
                : "No items in this phase"
              }
            </p>
          </Card>
        ) : (
          <div className="min-w-max">
            <div className="flex border-b border-slate-200 pb-2 mb-4">
              <div className="w-64 flex-shrink-0 font-semibold text-slate-700">Item</div>
              <div className="flex" style={{ width: `${totalDays * dayWidth}px` }}>
                {eachDayOfInterval({ start: range.start, end: range.end })
                  .filter((_, i) => i % 7 === 0)
                  .map((date, i) => (
                    <div key={i} className="text-xs text-slate-500" style={{ width: `${7 * dayWidth}px` }}>
                      {format(date, "MMM d")}
                    </div>
                  ))}
              </div>
            </div>

            <div className="space-y-3">
              {timelineNodes.map(node => {
                const startDay = differenceInDays(new Date(node.start_date), range.start);
                const duration = differenceInDays(new Date(node.due_date), new Date(node.start_date)) + 1;
                const phase = node.phase_id ? phases.find(p => p.id === node.phase_id) : null;
                
                return (
                  <div key={node.id} className="flex items-center">
                    <div className="w-64 flex-shrink-0">
                      <div className="flex items-center gap-2">
                        {getNodeIcon(node.type)}
                        <span className="font-medium text-sm text-slate-900">{node.title}</span>
                      </div>
                      <div className="flex gap-2 mt-1">
                        {node.status && (
                          <Badge className={`text-xs ${statusColors[node.status]}`}>
                            {node.status.replace("_", " ")}
                          </Badge>
                        )}
                        {phase && (
                          <Badge variant="outline" className="text-xs">
                            {phase.title}
                          </Badge>
                        )}
                      </div>
                    </div>
                    <div className="relative" style={{ width: `${totalDays * dayWidth}px` }}>
                      <div
                        className={`absolute h-8 rounded-lg ${getNodeColor(node.type)} opacity-80 hover:opacity-100 transition-opacity cursor-pointer shadow-md flex items-center px-3`}
                        style={{
                          left: `${startDay * dayWidth}px`,
                          width: `${duration * dayWidth}px`,
                          minWidth: '60px'
                        }}
                      >
                        <span className="text-white text-xs font-medium truncate">
                          {node.type === "milestone" ? format(new Date(node.due_date), "MMM d") : `${duration}d`}
                        </span>
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        )}
      </div>
    </div>
  );
}