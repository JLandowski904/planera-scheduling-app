import React from "react";
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Diamond, Package, CheckSquare, User, Pencil } from "lucide-react";
import { format } from "date-fns";

export default function NodeComponent({ node, isSelected, onSelect, onEdit, style }) {
  const getNodeIcon = () => {
    switch (node.type) {
      case "milestone": return <Diamond className="w-4 h-4" />;
      case "deliverable": return <Package className="w-4 h-4" />;
      case "task": return <CheckSquare className="w-4 h-4" />;
      case "person": return <User className="w-4 h-4" />;
      default: return null;
    }
  };

  const getNodeColor = () => {
    switch (node.type) {
      case "milestone": return "border-amber-400 bg-amber-50";
      case "deliverable": return "border-emerald-400 bg-emerald-50";
      case "task": return "border-sky-400 bg-sky-50";
      case "person": return "border-purple-400 bg-purple-50";
      default: return "border-slate-300 bg-white";
    }
  };

  const getNodeShape = () => {
    if (node.type === "milestone") {
      return "rotate-45 w-24 h-24";
    }
    if (node.type === "person") {
      return "rounded-full w-20 h-20";
    }
    return "rounded-lg w-48";
  };

  const statusColors = {
    not_started: "bg-slate-200 text-slate-700",
    in_progress: "bg-blue-100 text-blue-700",
    blocked: "bg-red-100 text-red-700",
    done: "bg-green-100 text-green-700"
  };

  if (node.type === "milestone") {
    return (
      <div
        style={{...style, pointerEvents: 'auto'}}
        className={`absolute transition-shadow duration-200 group ${isSelected ? 'ring-4 ring-amber-400 ring-opacity-50' : ''}`}
      >
        <Button
          variant="secondary"
          size="icon"
          className="absolute -top-2 -right-2 w-6 h-6 rounded-full opacity-0 group-hover:opacity-100 transition-opacity z-10 shadow-lg"
          onClick={(e) => {
            e.stopPropagation();
            onEdit(node);
          }}
        >
          <Pencil className="w-3 h-3" />
        </Button>
        <div className={`${getNodeShape()} border-4 ${getNodeColor()} flex items-center justify-center shadow-lg hover:shadow-xl transition-shadow`}>
          <div className="-rotate-45 text-center px-2">
            <div className="font-bold text-xs text-slate-900 mb-1">{node.title}</div>
            {node.due_date && (
              <div className="text-[10px] text-slate-600">{format(new Date(node.due_date), "MMM d")}</div>
            )}
          </div>
        </div>
      </div>
    );
  }

  if (node.type === "person") {
    return (
      <div
        style={{...style, pointerEvents: 'auto'}}
        className={`absolute transition-shadow duration-200 group ${isSelected ? 'ring-4 ring-purple-400 ring-opacity-50' : ''}`}
      >
        <Button
          variant="secondary"
          size="icon"
          className="absolute -top-2 -right-2 w-6 h-6 rounded-full opacity-0 group-hover:opacity-100 transition-opacity z-10 shadow-lg"
          onClick={(e) => {
            e.stopPropagation();
            onEdit(node);
          }}
        >
          <Pencil className="w-3 h-3" />
        </Button>
        <div className={`${getNodeShape()} border-3 ${getNodeColor()} flex items-center justify-center shadow-lg hover:shadow-xl transition-shadow`}>
          <div className="text-center">
            <div className="font-bold text-sm text-slate-900">{node.title.split(' ').map(n => n[0]).join('')}</div>
            {node.role && (
              <div className="text-[10px] text-slate-600 mt-1">{node.role}</div>
            )}
          </div>
        </div>
      </div>
    );
  }

  return (
    <Card
      style={{...style, pointerEvents: 'auto'}}
      className={`absolute border-2 ${getNodeColor()} ${getNodeShape()} shadow-lg hover:shadow-xl transition-all duration-200 group ${
        isSelected ? 'ring-4 ring-slate-400 ring-opacity-50' : ''
      }`}
    >
      <Button
        variant="secondary"
        size="icon"
        className="absolute -top-2 -right-2 w-6 h-6 rounded-full opacity-0 group-hover:opacity-100 transition-opacity z-10 shadow-lg"
        onClick={(e) => {
          e.stopPropagation();
          onEdit(node);
        }}
      >
        <Pencil className="w-3 h-3" />
      </Button>
      <div className="p-4">
        <div className="flex items-start justify-between mb-2">
          <div className="flex items-center gap-2">
            {getNodeIcon()}
            <h3 className="font-bold text-sm text-slate-900">{node.title}</h3>
          </div>
        </div>

        {node.status && node.type === "task" && (
          <Badge className={`text-xs ${statusColors[node.status]} mb-2`}>
            {node.status.replace("_", " ")}
          </Badge>
        )}

        {node.start_date && node.due_date && (
          <div className="text-xs text-slate-600 mb-2">
            {format(new Date(node.start_date), "MMM d")} â†’ {format(new Date(node.due_date), "MMM d")}
          </div>
        )}

        {node.type === "task" && node.percent_complete !== undefined && (
          <div className="mt-2">
            <div className="flex justify-between text-xs text-slate-600 mb-1">
              <span>Progress</span>
              <span>{node.percent_complete}%</span>
            </div>
            <div className="w-full bg-slate-200 rounded-full h-1.5">
              <div
                className="bg-sky-500 h-1.5 rounded-full transition-all duration-300"
                style={{ width: `${node.percent_complete}%` }}
              />
            </div>
          </div>
        )}

        {node.tags && node.tags.length > 0 && (
          <div className="flex flex-wrap gap-1 mt-2">
            {node.tags.slice(0, 2).map((tag, i) => (
              <Badge key={i} variant="outline" className="text-[10px] px-1 py-0">
                {tag}
              </Badge>
            ))}
          </div>
        )}
      </div>
    </Card>
  );
}